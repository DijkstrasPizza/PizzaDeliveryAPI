/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.PizzaStore;
import io.swagger.model.Special;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-10-11T13:23:56.479615-07:00[America/Los_Angeles]")
@Api(value = "stores", description = "the stores API")
public interface StoresApi {

    @ApiOperation(value = "deletes an existing pizza store", nickname = "deleteStoreById", notes = "This operation deletes pizza store with a given ID.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Item successfully deleted"),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class) })
    @RequestMapping(value = "/stores/{storeId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteStoreById(@Min(0)@ApiParam(value = "a store's unique ID",required=true, allowableValues="") @PathVariable("storeId") Integer storeId);


    @ApiOperation(value = "gets all the specials available at a specific store", nickname = "getAllSpecialsByStore", notes = "", response = Special.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ingredient found", response = Special.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class) })
    @RequestMapping(value = "/stores/{storeId}/specials",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Special>> getAllSpecialsByStore(@Min(0)@ApiParam(value = "a store's unique ID",required=true, allowableValues="") @PathVariable("storeId") Integer storeId);


    @ApiOperation(value = "returns a store object with a given ID", nickname = "getStoreById", notes = "By passing in a valid ID, you can find a store in the database.", response = PizzaStore.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "store found", response = PizzaStore.class),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class) })
    @RequestMapping(value = "/stores/{storeId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PizzaStore> getStoreById(@Min(0)@ApiParam(value = "a store's unique ID",required=true, allowableValues="") @PathVariable("storeId") Integer storeId);


    @ApiOperation(value = "returns a list of stores", nickname = "getStores", notes = "Gets a list of every store in the pizza company's network.", response = PizzaStore.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = PizzaStore.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class) })
    @RequestMapping(value = "/stores",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<PizzaStore>> getStores();


    @ApiOperation(value = "creates a new pizza store", nickname = "newStore", notes = "Creates a new store in the system to represent a new physical store.", response = PizzaStore.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "store added", response = PizzaStore.class),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class) })
    @RequestMapping(value = "/stores",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<PizzaStore> newStore(@ApiParam(value = "A JSON encoded PizzaStore object." ,required=true )  @Valid @RequestBody PizzaStore body);


    @ApiOperation(value = "updates an existing pizza store", nickname = "updateStoreById", notes = "This operation updates information on a pizza store with a given ID.", response = PizzaStore.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "item updated", response = PizzaStore.class),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class) })
    @RequestMapping(value = "/stores/{storeId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<PizzaStore> updateStoreById(@ApiParam(value = "A pizza store with updated information" ,required=true )  @Valid @RequestBody PizzaStore body,@Min(0)@ApiParam(value = "a store's unique ID",required=true, allowableValues="") @PathVariable("storeId") Integer storeId);

}
