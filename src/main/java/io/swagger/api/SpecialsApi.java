/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.Ingredient;
import io.swagger.model.Special;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-10-11T13:23:56.479615-07:00[America/Los_Angeles]")
@Api(value = "specials", description = "the specials API")
public interface SpecialsApi {

    @ApiOperation(value = "removes a special from the database", nickname = "deleteSpecialById", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Item successfully deleted"),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class) })
    @RequestMapping(value = "/specials/{specialId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSpecialById(@Min(0)@ApiParam(value = "a special's unique ID",required=true, allowableValues="") @PathVariable("specialId") Integer specialId);


    @ApiOperation(value = "returns a specific special", nickname = "getSpecialById", notes = "", response = Special.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "special found", response = Special.class),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class) })
    @RequestMapping(value = "/specials/{specialId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Special> getSpecialById(@Min(0)@ApiParam(value = "a special's unique ID",required=true, allowableValues="") @PathVariable("specialId") Integer specialId);


    @ApiOperation(value = "creates a new special at a specific store", nickname = "newSpecial", notes = "", response = Ingredient.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "special created", response = Ingredient.class),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class) })
    @RequestMapping(value = "/specials",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Ingredient> newSpecial(@ApiParam(value = "A JSON encoded special object" ,required=true )  @Valid @RequestBody Special body);


    @ApiOperation(value = "updates a specific special", nickname = "updateSpecialById", notes = "", response = Ingredient.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "special updated", response = Ingredient.class),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class) })
    @RequestMapping(value = "/specials/{specialId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Ingredient> updateSpecialById(@ApiParam(value = "A JSON encoded special object" ,required=true )  @Valid @RequestBody Special body,@Min(0)@ApiParam(value = "a special's unique ID",required=true, allowableValues="") @PathVariable("specialId") Integer specialId);

}
