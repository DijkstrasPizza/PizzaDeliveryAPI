/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.Ingredient;
import io.swagger.model.Menu;
import io.swagger.model.Pizza;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-10-11T13:23:56.479615-07:00[America/Los_Angeles]")
@Api(value = "menu", description = "the menu API")
public interface MenuApi {

    @ApiOperation(value = "deletes a menu with the given ID", nickname = "deleteMenuById", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Item successfully deleted"),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class) })
    @RequestMapping(value = "/menu/{menuId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteMenuById(@Min(0)@ApiParam(value = "a menu's unique ID",required=true, allowableValues="") @PathVariable("menuId") Integer menuId);


    @ApiOperation(value = "returns a list of menus", nickname = "getAllMenus", notes = "", response = Menu.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful", response = Menu.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class) })
    @RequestMapping(value = "/menu",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Menu>> getAllMenus();


    @ApiOperation(value = "returns a list of pizzas on a menu", nickname = "getAllPizzasByMenu", notes = "Gets a list of every pizza on a given menu.", response = Pizza.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Pizza.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class) })
    @RequestMapping(value = "/menu/{menuId}/pizzas",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Pizza>> getAllPizzasByMenu(@Min(0)@ApiParam(value = "a menu's unique ID",required=true, allowableValues="") @PathVariable("menuId") Integer menuId);


    @ApiOperation(value = "returns a list of pizza ingredients available on a menu", nickname = "getIngredients", notes = "Returns a list of all pizza ingredients on a menu. Optional query parameter allows filtering by ingredient category. ", response = Ingredient.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ingredients found", response = Ingredient.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class) })
    @RequestMapping(value = "/menu/{menuId}/ingredients",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Ingredient>> getIngredients(@Min(0)@ApiParam(value = "a menu's unique ID",required=true, allowableValues="") @PathVariable("menuId") Integer menuId,@ApiParam(value = "") @Valid @RequestParam(value = "category", required = false) String category);


    @ApiOperation(value = "returns the menu with the given ID", nickname = "getMenuById", notes = "", response = Menu.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "menu found", response = Menu.class),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class) })
    @RequestMapping(value = "/menu/{menuId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Menu> getMenuById(@Min(0)@ApiParam(value = "a menu's unique ID",required=true, allowableValues="") @PathVariable("menuId") Integer menuId);


    @ApiOperation(value = "creates a new menu", nickname = "newMenu", notes = "", response = Menu.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "menu added", response = Menu.class),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class) })
    @RequestMapping(value = "/menu",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Menu> newMenu(@ApiParam(value = "A JSON encoded menu object" ,required=true )  @Valid @RequestBody Menu body);


    @ApiOperation(value = "updates the menu with the given ID", nickname = "updateMenuById", notes = "", response = Menu.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "menu updated", response = Menu.class),
        @ApiResponse(code = 400, message = "Bad data in request", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class) })
    @RequestMapping(value = "/menu/{menuId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Menu> updateMenuById(@ApiParam(value = "A menu with updated information" ,required=true )  @Valid @RequestBody Menu body,@Min(0)@ApiParam(value = "a menu's unique ID",required=true, allowableValues="") @PathVariable("menuId") Integer menuId);

}
